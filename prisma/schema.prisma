generator client {
  provider = "prisma-client-js"
}

//Developement

 datasource db {
   provider = "sqlite"
   url      = env("DATABASE_URL")
 //}



//datasource db {
 // provider  = "postgresql"
 // url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String          @id
  firstName     String
  lastName      String
  email         String
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  Property      Property[]
  subscriptions Subscriptions[]
  favorites Favorite[]
}

model Property {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  price       Int
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  typeId      Int
  type        PropertyType      @relation(fields: [typeId], references: [id])
  statusId    Int
  status      PropertyStatus    @relation(fields: [statusId], references: [id])
  location    PropertyLocation?
  feature     PropertyFeature?
  images      PropertyImage[]
  videos      PropertyVideo[]   // Nouvelle relation pour les vidéos
  contact     Contact?
  createdAt   DateTime @default(now()) // Nouvelle colonne
  favorites Favorite[]
}


model Favorite {
  id         Int      @id @default(autoincrement())
  userId     String
  propertyId Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}


model PropertyType {
  id       Int        @id @default(autoincrement())
  value    String @unique
  Property Property[]
}

model PropertyStatus {
  id       Int        @id @default(autoincrement())
  value    String @unique
  Property Property[]
}

model PropertyLocation {
  id            Int      @id @default(autoincrement())
  streetAddress String
  city          String
  state         String
  zip           String
  region        String
  landmark      String
  propertyId    Int      @unique
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyFeature {
  id              Int      @id @default(autoincrement())
  bedrooms        Int
  bathrooms       Int
  parkingSpots    Int
  area            Int
  hasSwimmingPool Boolean
  hasGardenYard   Boolean
  hasBalcony      Boolean
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId      Int      @unique
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
}

model PropertyVideo {
  id          Int      @id @default(autoincrement())
  url         String   // Lien YouTube de la vidéo
  propertyId  Int      // Référence à la propriété associée
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) // Date d'ajout
}

model Contact {
  id         Int      @id @default(autoincrement())
  name       String
  phone      String
  email      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int      @unique
}

model SubscriptionPlan {
  id                    Int             @id @default(autoincrement())
  namePlan              String
  price                 Float // Prix en euros
  duration              String   @default("AN")// Durée, ex: "AN" ou"Mois"
  country               String   // Pays concerné
  startDate             DateTime // Date de début
  endDate               DateTime // Date de fin
  premiumAds            Int      // Nombre d'annonces premium incluses
  photosPerAd           Int      // Nombre de photos par annonce
  shortVideosPerAd      Int      // Nombre de vidéos courtes par annonce
  youtubeVideoDuration  String // Durée des vidéos YouTube
  zoneRadius            Int      // Zone de couverture (en km)
  features              String
  createdAt             DateTime @default(now()) // Date de création du plan
  updatedAt             DateTime @updatedAt // Dernière mise à jour
  subscriptions         Subscriptions[]
}

model Subscriptions {
  id        Int              @id @default(autoincrement())
  paymentID String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  startDate DateTime
  endDate DateTime
  plan      SubscriptionPlan @relation(fields: [palnId], references: [id])
  palnId    Int
  userId    String
  user      User             @relation(fields: [userId], references: [id])
}


